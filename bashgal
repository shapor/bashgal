#!/bin/bash
# bashgal - http://shapor.com/bashgal
# Author: Shapor Naghibzadeh <shapor@gmail.com>

# configuration section
convert="nice gm convert" # GraphicsMagick (http://www.graphicsmagick.org) > ImageMagick
jhead="nice jhead"
fadvise="nice fadvise -dontneed "
thumbx=133 thumby=100
sheetx=1200 sheety=10000
heights=(480 600 800 1024)
thumbdir=.th sheetdir=.sh jsdir=.js
index=index.html
defaultres=600
tmpsheet=/tmp/sheet-$$.jpg tmprow=/tmp/row-$$.jpg tmpindex=/tmp/index-$$.html
# end configuration section

function debug {
	return 0 # 0=enable, 1=disable debugging output
}

function usage {
	echo "$0: usage $0 [-x <width>] [-y <height>] [-t <title>] [-h] [directory]"
	echo "  [-x <width>] 	thumbnail width (default: 133)"
	echo "  [-y <height>] 	thumbnail height (default: 100)"
	echo "  [-t <title>] 	sets the title (default: none)"
	echo "  [-h]	 	displays help (this message)"
	echo "  [directory]	directory to run bashgal on"
}
err=0
title=
while getopts "x:y:t:" v; do
	case "$v" in
		x)	[[ OPTARG -gt 0 ]] || { echo "error: arg $v takes only non-zero integer arguments"; let err++; continue; }
			thumbx=$OPTARG
			;;
		y)	[[ OPTARG -gt 0 ]] || { echo "error: arg $v takes only non-zero integer arguments"; let err++; continue; }
			thumby=$OPTARG
			;;
		t)	title="$OPTARG"
			;;
	esac
done
shift $((OPTIND - 1))
[[ $# -gt 1 ]] && { usage; exit 1; }
[[ $# -eq 0 ]] || pushd $1 >/dev/null || exit 1

[[ -d $thumbdir ]] || mkdir $thumbdir || exit 2

[[ -d $jsdir ]] || mkdir $jsdir || exit 2
cat >$jsdir/swipedetect.js << EOF
function swipedetect(el, callback){
    var touchsurface = el, swipedir, startX, startY, distX, distY, threshold = 150,
    restraint = 100, allowedTime = 300, elapsedTime, startTime,
    handleswipe = callback || function(swipedir){}

    touchsurface.addEventListener('touchstart', function(e){
        var touchobj = e.changedTouches[0]
        swipedir = 'none'
        dist = 0
        startX = touchobj.pageX
        startY = touchobj.pageY
        startTime = new Date().getTime()
        e.preventDefault()
    }, false)

    touchsurface.addEventListener('touchmove', function(e){
        e.preventDefault()
    }, false)

    touchsurface.addEventListener('touchend', function(e){
        var touchobj = e.changedTouches[0]
        distX = touchobj.pageX - startX
        distY = touchobj.pageY - startY
        elapsedTime = new Date().getTime() - startTime
        if (elapsedTime <= allowedTime){
            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){
                swipedir = (distX < 0)? 'left' : 'right'
            }
            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){
                swipedir = (distY < 0)? 'up' : 'down'
            }
        }
        handleswipe(swipedir)
        e.preventDefault()
    }, false)
}
EOF

[[ -z $title ]] || titled="$title - "
for res in ${heights[*]}; do
	[[ -d .$res/.html ]] || mkdir -p .$res/.html || exit 3
	echo "<html><head><title>$title</title></head>" >$tmpindex.$res
	echo "<body><style>div{height:${thumby}px;margin:1;padding:0;position:relative;overflow:hidden;float:left}</style>" >>$tmpindex.$res
	echo -n "<div style='width:100%;height:1.2em'>$titled" >>$tmpindex.$res
	for size in ${heights[*]}; do
		[[ $size == $res ]] && echo -n "$size " || echo -n "<a href='.$size.$index'>$size</a> "
	done >>$tmpindex.$res
	echo -n "</div>" >>$tmpindex.$res
done

numfiles=0
for filename in *.[jJ][pP][gG]; do
	debug && echo -n "$filename: "
	$jhead -autorot "$filename" 2>/dev/null | grep ^Modified: >/dev/null && echo -n "rotated "
	[[ -s $thumbdir/$filename ]] || $convert -scale x$thumby "$filename" "$thumbdir/$filename" || continue
	filelist[$numfiles]=$filename
	let numfiles++
	for res in ${heights[*]}; do
		debug && echo -n "$res "
		if [[ ! -s .$res/$filename ]]; then
			$convert -scale x$res "$filename" ".$res/$filename" &
			$fadvise ".$res/$filename" 2>/dev/null
		fi
	done
	wait
	$fadvise "$filename" 2>/dev/null
	debug && echo
done

# The rest is basically an optimization to take advantage of spriting css
# generate thumbnail sheets up to sheetx x sheety size
[[ -d $sheetdir ]] || mkdir $sheetdir || exit 10
sheet=0 cury=0 curx=0 file=0
while [[ $file -lt $numfiles ]]; do
	filename=${filelist[$file]}
	thumb=$thumbdir/$filename
	twidth=$($jhead "$thumb" 2>/dev/null | awk '($1 == "Resolution") {print $3}')

	# generate the thumbnail sheets
	if [[ $((curx + twidth)) -gt $sheetx ]]; then
		debug && echo 
		if [[ ! -e $tmpsheet ]]; then
			cp $tmprow $tmpsheet
		else
			$convert -append $tmpsheet $tmprow $tmpsheet
		fi
		rm $tmprow
		curx=0
		cury=$((cury + thumby))
		if [[ $((cury + thumby)) -gt $sheety ]]; then
			debug && echo saving sheet $sheet
			mv $tmpsheet $sheetdir/$sheet.jpg
			cury=0
			let sheet++
		fi
	fi
	debug && echo -n "$filename "
	if [[ ! -e $tmprow ]]; then
		cp "$thumb" $tmprow
	else
		$convert +append $tmprow "$thumb" $tmprow 2>/dev/null
	fi

	# generate the html in .1024/.html/file.jpg.html
	for res in ${heights[*]}; do
		prev= next=
		[[ $file -ne 0 ]] && prev=${filelist[$((file - 1))]}
		[[ $file -ne $((numfiles - 1)) ]] && next=${filelist[$((file + 1))]}
		htmlfile=.$res/.html/$filename.html
		xsize=$($jhead ".$res/$filename" 2>/dev/null | awk '($1 == "Resolution") {print $3}')
		cat >"$htmlfile" <<EOF
<html><head><title>$filename</title>
<script type="text/javascript" src="../../$jsdir/swipedetect.js"></script>
<script language="JavaScript">
prev=new Image();
next=new Image();
function f(){
	document.onkeydown = checkKey;

	function checkKey(e) {
		e = e || window.event;

		var sendTo = "";
		switch (e.keyCode) {
			case 38: /* Up */
				return
			case 39: /* Right */
			  sendTo = "$next.html";
			  break;
			case 40: /* Down */
				return
			case 37: /* Left */
			  sendTo = "$prev.html";
			  break;
			default: return
		}
		if (sendTo != ".html") {
			window.location.href = sendTo;
		}
	}
EOF
		[[ $prev ]] && echo "prev.src='../$prev';" >>"$htmlfile"
		[[ $next ]] && echo "next.src='../$next';" >>"$htmlfile"
		cat >>"$htmlfile" <<EOF
var el = document.getElementById('page')
swipedetect(el, function(swipedir){
EOF
		[[ $prev ]] && echo "  if (swipedir == 'right') window.location.href = '$prev.html';" >>"$htmlfile"
		[[ $next ]] && echo "  if (swipedir == 'left') window.location.href = '$next.html';" >>"$htmlfile"
		cat >>"$htmlfile" <<EOF
  if (swipedir == 'down') window.location.href = '../../.$res.$index';
  if (swipedir == 'none') window.location.href = '../../$filename';
})
}
</script></head><body id=page onLoad="f()">
<a href='../../.$res.$index'>^ up to thumbnails ^</a> 
EOF
		[[ $prev ]] && echo "<a href='$prev.html'>&lt;- prev</a> " >>"$htmlfile" || echo -n "&lt;- prev " >>"$htmlfile"
		[[ $next ]] && echo "<a href='$next.html'>next -&gt;</a> " >>"$htmlfile" || echo -n "next -&gt; " >>"$htmlfile"
		for size in ${heights[*]}; do
			[[ $size == $res ]] && echo -n "$size " || echo -n "<a href='../../.$size/.html/$filename.html'>$size</a> "
		done >>"$htmlfile"
		echo "<p><a href="../../$filename"><img border=0 width=$xsize height=$res src='../$filename'></a><p>" >>"$htmlfile"
		$jhead "$filename" 2>/dev/null | sed 's/$/<br>/' >>"$htmlfile"
		echo '<hr><font size="-1">Generated by <a href="http://shapor.com/bashgal">bashgal</a></font></body>' >>"$htmlfile"
		echo "<div style='width:${twidth}px'><a href='.$res/.html/$filename.html'><img border=0 alt='$filename' src='$sheetdir/$sheet.jpg' style='left:-${curx}px;top:-${cury}px;position:absolute'></a></div>" >>$tmpindex.$res
	done

	let file++
	curx=$((curx + twidth))
done
if [[ ! -e $tmpsheet ]]; then
	cp $tmprow $tmpsheet
else
	$convert -append $tmpsheet $tmprow $tmpsheet
fi
rm $tmprow 2>/dev/null
debug && echo && echo saving sheet $sheet
mv $tmpsheet $sheetdir/$sheet.jpg 2>/dev/null
# generate html
for res in ${heights[*]}; do
	if [[ $(ls *.thm 2>/dev/null|wc -l) -gt 0 ]]; then
		echo "<div>Movies: </div>" >>$tmpindex.$res
		for file in *.thm; do
			mpg="$(basename $file .thm).mpg"
			if [[ -e $mpg ]]; then
				echo "<div><a href='$mpg'><img border=0 src='$file'></a></div>" >>$tmpindex.$res
			fi
		done
	fi
	echo "</body></html>" >>$tmpindex.$res
	mv $tmpindex.$res .$res.$index
done
rm $index 2>/dev/null
cp .$defaultres.$index $index
[[ $# -eq 1 ]] && popd >/dev/null
